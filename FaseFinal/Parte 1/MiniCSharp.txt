Compiler GRAMATICA_PROYECTO_MiniCSharp.
	
SETS
		letra = 'A'..'Z'+'a'..'z'+'_'.
		digito = '0'..'9'.
		charset = chr(32)..chr(254).
		
TOKENS
	
	IDENTIFICADOR = LETRA (LETRA | DIGITO)* CHECK. 
	NUMERO = DIGITO+.
	CARACTER = "'" LETRA "'" | "'" DIGITO "'".
	
	'+' , '-' , '&&' , '||' , '>' , '>=' , '<' , '<=' , '!=' , '==', '=', '!' LEFT .
	'/', '*', '%' LEFT.
	'++', '--' LEFT .
	'.' ,','.

KEYWORDS
'PUBLIC', 'CLASS', 'INT', 'CHAR', 'VOID','CONST', 'DO', 'ELSE', 'FOR', 'IF','DEFAULT', 'REF', 'RETURN', 'SWITCH' , 'CASE', 'WHILE' , 'NULL', 'BREAK', 'INCLUDE' .
	
COMMENTS '/*' TO '*/' comentario.
	
PRODUCTIONS

<START> -> <PROGRAM>.

<PROGRAM> -> 'PUBLIC' 'CLASS' IDENTIFICADOR <M2>  '{' <METODOS>  '}' <M3> .

	<M2> -> ɛ {NOMBRECLASE} .
	<M3> -> ɛ {FINCLASS} .

<METODOS> -> <METHOD_DECLARATION>
		|<DECLARATION_STATEMENT>
		|<METODOS> <DECLARATION_STATEMENT>
		| <METODOS> <METHOD_DECLARATION> .
		

<METHOD_DECLARATION> -> <METHOD_HEADER> <METHOD_BODY> .

<METHOD_HEADER> -> 'PUBLIC' <RETURN_TYPE> IDENTIFICADOR <M4> '(' <FORMAL_PARAMETER_LIST> ')'.

	<M4> -> ɛ {NOMBREMETODO} .

<RETURN_TYPE> -> <TYPE>
			| 'VOID'.

<TYPE> -> 'INT' <M5> 
	| 'CHAR' <M5>.
	

	<M5> -> ɛ {GUARDARTIPO} .

<FORMAL_PARAMETER_LIST> -> <FIXED_PARAMETERs>
			| <FIXED_PARAMETERS> ',' <FORMAL_PARAMETER_LIST>
			| ɛ .

<FIXED_PARAMETERS> -> <FIXED_PARAMETER>
			| <FIXED_PARAMETERS> ',' <FIXED_PARAMETER>.

<FIXED_PARAMETER> -> <TYPE> IDENTIFICADOR <M7> .

<M7> -> ɛ {PARAMETROMETODO} .

<METHOD_BODY> -> <BLOCK>.


<BLOCK> -> '{' <STATEMENT_LIST> '}'.

<STATEMENT_LIST> -> <STATEMENT>
				| <STATEMENT_LIST>  <STATEMENT>
				| ɛ .
				
<STATEMENT> -> <STATEMENT><DECLARATION_STATEMENT>
			| <STATEMENT><EMBEDDED_STATEMENT>
			| ɛ.  

<DECLARATION_STATEMENT> -> <LOCAL_VARIABLE_DECLARATION> ';'
					| <LOCAL_CONSTANT_DECLARATION> ';'.

<EMBEDDED_STATEMENT> -> <EMPTY_STATEMENT>
						| <EXPRESSION_STATEMENT>
						|<SELECTION_STATEMENT>
						|<JUMP_STATEMENT>
						|<ITERATION_STATEMENT>
						| ɛ. 

<LOCAL_VARIABLE_DECLARATION> -><TYPE> <LOCAL_VARIABLE_DECLARATORS>.


<LOCAL_VARIABLE_DECLARATORS> -> <LOCAL_VARIABLE_DECLARATOR>
			| <LOCAL_VARIABLE_DECLARATORS> ',' <LOCAL_VARIABLE_DECLARATOR>.

<LOCAL_VARIABLE_DECLARATOR> -> IDENTIFICADOR <M9>
				| IDENTIFICADOR <M9> '=' <LOCAL_VARIABLE_INITIALIZER> <M10>.
				
	<M9> -> ɛ {GUARDARVARIABLE} .
	<M10> -> ɛ {FINEXPREVARIABLE} .

<LOCAL_CONSTANT_DECLARATION> -> 'CONST' <TYPE> <CONSTANT_DECLARATORS>.

<CONSTANT_DECLARATORS> -> <CONSTANT_DECLARATOR> 
		| <CONSTANT_DECLARATORS> ',' <CONSTANT_DECLARATOR>.

<CONSTANT_DECLARATOR> -> IDENTIFICADOR <M12> '=' <CONSTANT_EXPRESSION> <M13>.

	<M12> -> ɛ {GUARDARVARIABLECONST} .
	<M13> -> ɛ {FINEXPREVARIABLECONST} .

<CONSTANT_EXPRESSION> -> <ADDITIVE_EXPRESSION>.

<EMPTY_STATEMENT> -> ';'.

<SELECTION_STATEMENT>-><IF_STATEMENT>
				    | <SWITCH_STATEMENT>.


<EXPRESSION_STATEMENT> -> <STATEMENT_EXPRESSION>';'.

<STATEMENT_EXPRESSION>-><INVOCATION_EXPRESSION>
					| <ASSIGMENT>
					| <POST_INCREMENT_EXPRESSION>
					| <POST_DECREMENT_EXPRESSION>.

<LOCAL_VARIABLE_INITIALIZER> -> <EXPRESSION>.


<IF_STATEMENT>-> 'IF' <M14> '(' <BOOLEAN_EXPRESSION> ')' '{' <STATEMENT> '}'
		|  'IF' <M14> '('<BOOLEAN_EXPRESSION> ')'  '{' <STATEMENT> '}' 'ELSE'  <M15> '{' <STATEMENT> '}'.

	<M14> -> ɛ {ACCIONIF} .
	<M15> -> ɛ {ACCIONELSE} .

<SWITCH_STATEMENT> -> 'SWITCH' <M16>'(' <EXPRESSION> ')' <SWITCH_BLOCK>.

	<M16> -> ɛ {ACCIONSWITCH} .

<INVOCATION_EXPRESSION> -> <PRIMARY_EXPRESSION> '(' <ARGUMENT_LISTopt> ')'.

<ASSIGMENT> ->  <UNARY_EXPRESSION> <ASSIGMENT_OPERATOR> <EXPRESSION>.

<ASSIGMENT_OPERATOR> -> '='.

<EXPRESSION> -> <CONDITIONAL_OR_EXPRESSION> 
			| <ASSIGMENT>.

<BOOLEAN_EXPRESSION> -> <EXPRESSION>.

<UNARY_EXPRESSION> -> <PRIMARY_EXPRESSION> 
				| '+' <UNARY_EXPRESSION>
				| '-' <UNARY_EXPRESSION>.

<POST_INCREMENT_EXPRESSION> -> <PRIMARY_EXPRESSION> '++'.


<ARGUMENT_LISTopt> -> <ARGUMENT>
				| <ARGUMENT_LISTopt> ',' <ARGUMENT>
				| ɛ.

<POST_DECREMENT_EXPRESSION>-><PRIMARY_EXPRESSION> '--'.

<PRIMARY_EXPRESSION>-><PRIMARY_NO_ARRAY_CREATION_EXPRESSION>.

<PRIMARY_NO_ARRAY_CREATION_EXPRESSION> -> <LITERALES>
						|  <SIMPLE_NAME>
						|  <PARENTHESIZED_EXPRESSION>
						|  <INVOCATION_EXPRESSION>
						|  <POST_INCREMENT_EXPRESSION>
						| <POST_DECREMENT_EXPRESSION> .

<LITERALES> -> CARACTER {CHARLITERALES}
				| NUMERO {NUMLITERALES}.

<SIMPLE_NAME> -> IDENTIFICADOR.
 <PARENTHESIZED_EXPRESSION> -> '(' <EXPRESSION> ')' .


<SWITCH_BLOCK> -> '{' <SWITCH_SECTIONSopt> '}' .
			
<CONDITIONAL_OR_EXPRESSION>-> <CONDITIONAL_AND_EXPRESSION>
					| <CONDITIONAL_OR_EXPRESSION> '||' <CONDITIONAL_AND_EXPRESSION>.


<CONDITIONAL_AND_EXPRESSION>-><EQUALITY_EXPRESSION>
		|<CONDITIONAL_AND_EXPRESSION> '&&' <EQUALITY_EXPRESSION>.

<ARGUMENT> -> <EXPRESSION>.

<SWITCH_SECTIONSopt> -> <SWITCH_SECTION>
			        | <SWITCH_SECTIONSopt> <SWITCH_SECTION> 
					| ɛ.


<EQUALITY_EXPRESSION> -> <RELATIONAL_EXPRESSION>
		|  <EQUALITY_EXPRESSION> '==' <RELATIONAL_EXPRESSION> {CONDIIGUAL}
		|  <EQUALITY_EXPRESSION> '!='  <RELATIONAL_EXPRESSION> {CONDINOIGUAL}.


<RELATIONAL_EXPRESSION> -><ADDITIVE_EXPRESSION>
			|<RELATIONAL_EXPRESSION> '<' <ADDITIVE_EXPRESSION> {CONDIMENORQUE}
			|<RELATIONAL_EXPRESSION> '>' <ADDITIVE_EXPRESSION> {CONDIMAYORQUE}
			|<RELATIONAL_EXPRESSION> '<=' <ADDITIVE_EXPRESSION> {CONDIMENOIGUALQUE}
			|<RELATIONAL_EXPRESSION> '>=' <ADDITIVE_EXPRESSION> {CONDIMAYOIGUALQUE}.

<ADDITIVE_EXPRESSION> -> <MULTIPLICATIVE_EXPRESSION>
		| <ADDITIVE_EXPRESSION> '+' <MULTIPLICATIVE_EXPRESSION> {EXPRESUMA}
		| <ADDITIVE_EXPRESSION> '-' <MULTIPLICATIVE_EXPRESSION> {EXPRERESTA}.

<MULTIPLICATIVE_EXPRESSION> -> <UNARY_EXPRESSION>
		| <MULTIPLICATIVE_EXPRESSION> '*' <UNARY_EXPRESSION> {EXPREMULTI}
		| <MULTIPLICATIVE_EXPRESSION> '/' <UNARY_EXPRESSION> {EXPREDIVI}
		| <MULTIPLICATIVE_EXPRESSION> '%' <UNARY_EXPRESSION> {EXPREMOD}.



<SWITCH_SECTION> -> <SWITCH_LABELS> <STATEMENT_LIST> .

<SWITCH_LABELS> -> <SWITCH_LABEL>
              | <SWITCH_LABELS>   <SWITCH_LABEL>.


<SWITCH_LABEL> -> 'CASE' <M17> <CONSTANT_EXPRESSION> ':'
			| 'DEFAULT' ':'  .

		<M17> -> ɛ {ACCIONCASE} .

<ITERATION_STATEMENT> -> <WHILE_STATEMENT>
				| <DO_STATEMENT>
				| <FOR_STATEMENT>.


<WHILE_STATEMENT>->'WHILE' <M18> '(' <BOOLEAN_EXPRESSION> ')' '{' <STATEMENT> '}'.

	<M18> -> ɛ {ACCIONWHILE}	.

<DO_STATEMENT> -> 'DO' <M19> '{' <STATEMENT> '}' 'WHILE' '(' <BOOLEAN_EXPRESSION> ')' ';' .

	<M19> -> ɛ {ACCIONDO}	.

<FOR_STATEMENT> -> 'FOR' <M20> '(' <FOR_INITIALIZERopt> ';' <FOR_CONDITIONopt> ';' <FOR_ITERATORopt> ')' '{' <STATEMENT> '}'.

	<M20> -> ɛ {ACCIONFOR}	.

<FOR_INITIALIZERopt> -> <LOCAL_VARIABLE_DECLARATION>
				| <STATEMENT_EXPRESSION_LIST>
				| ɛ.

<FOR_CONDITIONopt> -> <BOOLEAN_EXPRESSION>
				| ɛ .

<FOR_ITERATORopt> -> <STATEMENT_EXPRESSION_LIST> 
|ɛ.


 <STATEMENT_EXPRESSION_LIST>-><STATEMENT_EXPRESSION> | <STATEMENT_EXPRESSION_LIST> ',' <STATEMENT_EXPRESSION>.


<JUMP_STATEMENT> -> <BREAK_STATEMENT>
			| <RETURN_STATEMENT> .
<BREAK_STATEMENT> -> 'BREAK' ';'.
<RETURN_STATEMENT> -> 'RETURN' <EXPRESSIONopt>.
<EXPRESSIONopt> -> <EXPRESSION> 
			| ɛ .


END.